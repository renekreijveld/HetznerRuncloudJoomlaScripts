#!/bin/bash

# jakeebabackupall -- Find Joomla instances and backup these with Akeeba Backup CLI
# Supports Joomla versions 2.5 - 3.x
#
# Copyright 2014 - 2019 Rene Kreijveld - email@renekreijveld.nl
# This program is free software; you may redistribute it and/or modify it.
#
# Warning! This script needs the file jfunctions. This has to be installed in the same directory as this script.
#
# Version history
# 1.0 Initial version
# 1.1 Suppressed output and added better logging message
# 1.2 Correct error output suppression
# 1.3 Added e-mail notification
# 1.4 Code cleanup

# define variables
# version
version=1.4
# start folder where we start searching
startdir=/home
# where to store backup files
storepath=/backups/sites
# what logfile to use
logfile=/usr/local/sbin/sitesbackup.log
# number of backups to retain
savebackups=4
# display messages
silent="no"
now=$(date +"%Y%m%d-%H%M%S")

# determine path of script
mypath=$(cd $(dirname ${0}); pwd -P)
myname=$(basename ${0})

# check if folder for backup storage exists
if [ ! -d "${storepath}" ]
then
	echo "Cannot continue, storepath ("${storepath}") does not exist!"
	exit 1
fi

# create dummy folder if needed
if [ ! -d /dummy ]
then
	mkdir /dummy
fi

# find mail client
if [ -s /bin/mail ]
then
	mailprog=/bin/mail
elif [ -s /usr/bin/mail ]
then
	mailprog=/usr/bin/mail
fi

# display usage information
usage() {
	echo ""
	echo "${myname} version ${version}, written by Rene Kreijveld."
	echo ""
	echo "Usage: ${myname} [-b <backups>] [-n <email>] [-s] [-h]"
	echo ""
	echo "-b Number of backups to keep, '-b 2' means keep 2 backups. Default is 4."
	echo "-n Send notification to <email> (comma-separated list of email addresses, without spaces)."
	echo "-s Silent. Do not display any messages to standard output."
	echo "-h Help. Display this info."
	echo ""
	exit 0
}

# process the arguments
while getopts b:n:sh opt
do
	case "${opt}" in
		b)
			savebackups=${OPTARG}
			;;
		n)
			notify="yes"
			receivers=${OPTARG}
			;;
		s)
			silent="yes"
			;;
		h)
			usage
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done

if [ "${silent}" == "no" ]
then
	echo ""
	echo "${myname} version ${version}, written by Rene Kreijveld."
	echo ""
fi

for dir in $(find ${startdir} -maxdepth 4 -type d)
do
	if [ -f ${dir}/configuration.php ]
	then
		# possible joomla found
		if [ "${silent}" == "no" ]
		then
			echo "Possible Joomla found at ${dir}."
		fi
		cd ${dir}
		if [ ! -e ${mypath}/jfunctions ]
		then
			echo ""
			echo "Cannot continue: script jfunctions not found."
			echo ""
			exit 1
		fi
		# include general functions
		. ${mypath}/jfunctions
		# check if akeeba-backup script exists
		if [ ! -e cli/akeeba-backup.php ]
		then
			echo ""
			echo "Cannot continue: php script akeeba-backup.php in cli map not found."
			echo ""
			exit 1
		fi
		# create backup
		if [ "${silent}" == "no" ]
		then
			echo "`date +"%H:%M:%S"` starting Akeeba Backup CLI for ${sitenameclean}."
		fi
		echo "`date` Start Akeeba Backup CLI ${sitenameclean}" >> ${logfile}
		# create the backup
		cd cli
		/usr/bin/php akeeba-backup.php >/dev/null 2>&1
		cd ..
		mv administrator/components/com_akeeba/backup/*.jpa ${storepath}
		if [ "${silent}" == "no" ]
		then
			echo "`date +"%H:%M:%S"` Akeeba Backup CLI for ${sitenameclean} finished."
			echo ""
		fi
		if [ "${notify}" == "yes" ]
		then
			echo "Akeeba CLI backup site ${sitenameclean} is finished." | ${mailprog} -s "Akeeba CLI backup ${sitenameclean} ready" "${receivers}"
		fi
		echo "`date` End Akeeba Backup CLI backup ${sitenameclean}" >> ${logfile}
	fi
done

# cleanup backups older than savebackups days
cd /dummy
find ${storepath}/* -type f -mtime +${savebackups} -delete
